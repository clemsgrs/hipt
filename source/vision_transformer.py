import math
import warnings
import torch
import torch.nn as nn
from functools import partial
from typing import Optional, Callable


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1.0 + math.erf(x / math.sqrt(2.0))) / 2.0

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn(
            "mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
            "The distribution of values may be incorrect.",
            stacklevel=2,
        )

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.0))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0.0, std=1.0, a=-2.0, b=2.0):
    # type: (Tensor, float, float, float, float) -> Tensor
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def drop_path(x, drop_prob: float = 0.0, training: bool = False):
    if drop_prob == 0.0 or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (
        x.ndim - 1
    )  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)
    random_tensor.floor_()  # binarize
    output = x.div(keep_prob) * random_tensor
    return output


class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks)."""

    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training)


class Mlp(nn.Module):
    def __init__(
        self,
        in_features,
        hidden_features=None,
        out_features=None,
        act_layer=nn.GELU,
        drop=0.0,
    ):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


class Attention(nn.Module):
    def __init__(
        self,
        dim,
        num_heads=8,
        qkv_bias=False,
        qk_scale=None,
        attn_drop=0.0,
        proj_drop=0.0,
    ):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        self.scale = qk_scale or head_dim**-0.5

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x):
        B, N, C = x.shape
        qkv = (
            self.qkv(x)
            .reshape(B, N, 3, self.num_heads, C // self.num_heads)
            .permute(2, 0, 3, 1, 4)
        )
        q, k, v = qkv[0], qkv[1], qkv[2]

        attn = (q @ k.transpose(-2, -1)) * self.scale
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x, attn


class MaskedAttention(Attention):
    def forward(self, x, mask):
        B, seq_length, embed_dim = x.shape
        qkv = (
            self.qkv(x)
            .reshape(B, seq_length, 3, self.num_heads, embed_dim // self.num_heads)
            .permute(2, 0, 3, 1, 4)
        )
        q, k, v = qkv[0], qkv[1], qkv[2]

        # raw attention scores
        raw_attn = (
            q @ k.transpose(-2, -1)
        ) * self.scale  # (M, nhead, seq_length, seq_length)

        # (B, seq_length)
        mask_ = mask.unsqueeze(1)  # (B, 1, seq_length)
        mask_ = mask_.unsqueeze(1).expand(
            -1, self.num_heads, -1, -1
        )  # (B, nhead, 1, seq_length)
        # apply the mask so that masked positions have a large negative number,
        # which becomes zero after softmax, ensuring they do not contribute to the attention scores
        masked_attn = raw_attn.masked_fill(mask_ == 0, float("-inf"))

        # apply softmax to get the attention weights. Now the masked positions are 0.
        attn = masked_attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, seq_length, embed_dim)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x, attn


class Block(nn.Module):
    def __init__(
        self,
        dim,
        num_heads,
        mlp_ratio=4.0,
        qkv_bias=False,
        qk_scale=None,
        drop=0.0,
        attn_drop=0.0,
        drop_path=0.0,
        act_layer=nn.GELU,
        norm_layer=nn.LayerNorm,
        mask_attn: bool = False,
    ):
        super().__init__()
        self.norm1 = norm_layer(dim)
        if mask_attn:
            self.attn = MaskedAttention(
                dim,
                num_heads=num_heads,
                qkv_bias=qkv_bias,
                qk_scale=qk_scale,
                attn_drop=attn_drop,
                proj_drop=drop,
            )
        else:
            self.attn = Attention(
                dim,
                num_heads=num_heads,
                qkv_bias=qkv_bias,
                qk_scale=qk_scale,
                attn_drop=attn_drop,
                proj_drop=drop,
            )
        self.drop_path = DropPath(drop_path) if drop_path > 0.0 else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(
            in_features=dim,
            hidden_features=mlp_hidden_dim,
            act_layer=act_layer,
            drop=drop,
        )

    def forward(self, x, return_attention=False, mask: Optional[torch.Tensor] = None):
        if mask is not None:
            y, attn = self.attn(self.norm1(x), mask)
        else:
            y, attn = self.attn(self.norm1(x))
        if return_attention:
            return attn
        x = x + self.drop_path(y)
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x


class PatchEmbed(nn.Module):
    """Image to Patch Embedding"""

    def __init__(self, patch_size=16, in_chans=3, embed_dim=768):
        super().__init__()
        self.patch_size = patch_size
        self.proj = nn.Conv2d(
            in_chans, embed_dim, kernel_size=patch_size, stride=patch_size
        )

    def forward(self, x):
        x = x.to(torch.float32)
        x = self.proj(x).flatten(2).transpose(1, 2)
        return x


class VisionTransformer(nn.Module):
    """Vision Transformer"""

    def __init__(
        self,
        img_size: int = 256,
        patch_size: int = 16,
        in_chans: int = 3,
        dino_max_crop_scale: float = 0.875,
        num_classes: int = 0,
        embed_dim: int = 768,
        depth: int = 12,
        num_heads: int = 12,
        mlp_ratio: float = 4.0,
        qkv_bias: bool = False,
        qk_scale: Optional[float] = None,
        drop_rate: float = 0.0,
        attn_drop_rate: float = 0.0,
        drop_path_rate: float = 0.0,
        norm_layer: Callable = nn.LayerNorm,
        num_register_tokens: int = 0,
        mask_attn: bool = False,
        img_size_pretrained: Optional[int] = None,
    ):
        super().__init__()
        self.embed_dim = embed_dim
        self.num_heads = num_heads
        self.num_register_tokens = num_register_tokens

        num_patches = int(img_size * dino_max_crop_scale // patch_size) ** 2
        if img_size_pretrained:
            num_patches = (
                int(img_size_pretrained * dino_max_crop_scale // patch_size) ** 2
            )

        self.patch_embed = PatchEmbed(
            patch_size=patch_size,
            in_chans=in_chans,
            embed_dim=embed_dim,
        )

        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))
        self.pos_embed = nn.Parameter(torch.zeros(1, num_patches + 1, embed_dim))
        self.pos_drop = nn.Dropout(p=drop_rate)

        assert num_register_tokens >= 0
        self.register_tokens = (
            nn.Parameter(torch.zeros(1, num_register_tokens, embed_dim)) if num_register_tokens else None
        )

        dpr = [
            x.item() for x in torch.linspace(0, drop_path_rate, depth)
        ]  # stochastic depth decay rule
        self.blocks = nn.ModuleList(
            [
                Block(
                    dim=embed_dim,
                    num_heads=num_heads,
                    mlp_ratio=mlp_ratio,
                    qkv_bias=qkv_bias,
                    qk_scale=qk_scale,
                    drop=drop_rate,
                    attn_drop=attn_drop_rate,
                    drop_path=dpr[i],
                    norm_layer=norm_layer,
                    mask_attn=mask_attn,
                )
                for i in range(depth)
            ]
        )
        self.norm = norm_layer(embed_dim)

        # Classifier head
        self.head = (
            nn.Linear(embed_dim, num_classes) if num_classes > 0 else nn.Identity()
        )

        trunc_normal_(self.pos_embed, std=0.02)
        trunc_normal_(self.cls_token, std=0.02)
        if self.register_tokens is not None:
            nn.init.normal_(self.register_tokens, std=1e-6)
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=0.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def interpolate_pos_encoding(self, x, w, h):
        # x = [num_patches, num_mini_patches+1, 768]
        npatch = x.shape[1] - 1
        N = self.pos_embed.shape[1] - 1
        if npatch == N and w == h:
            return self.pos_embed
        class_pos_embed = self.pos_embed[:, 0]
        patch_pos_embed = self.pos_embed[:, 1:]
        dim = x.shape[-1]
        w0 = w // self.patch_embed.patch_size
        h0 = h // self.patch_embed.patch_size
        # we add a small number to avoid floating point error in the interpolation
        # see discussion at https://github.com/facebookresearch/dino/issues/8
        w0, h0 = w0 + 0.1, h0 + 0.1
        patch_pos_embed = nn.functional.interpolate(
            patch_pos_embed.reshape(
                1, int(math.sqrt(N)), int(math.sqrt(N)), dim
            ).permute(0, 3, 1, 2),
            scale_factor=(w0 / math.sqrt(N), h0 / math.sqrt(N)),
            mode="bicubic",
            align_corners=False,
            recompute_scale_factor=True,
        )
        assert (
            int(w0) == patch_pos_embed.shape[-2]
            and int(h0) == patch_pos_embed.shape[-1]
        )
        patch_pos_embed = patch_pos_embed.permute(0, 2, 3, 1).view(1, -1, dim)
        return torch.cat((class_pos_embed.unsqueeze(0), patch_pos_embed), dim=1)

    def prepare_tokens(self, x):
        # x = [num_patches, 3, img_size, img_size]
        B, nc, w, h = x.shape
        x = self.patch_embed(
            x
        )  # patch linear embedding, x = [num_patches, num_mini_patches, 768]

        # add the [CLS] token to the embed patch tokens
        cls_tokens = self.cls_token.expand(B, -1, -1)  # [num_patches, 1, 768]
        x = torch.cat((cls_tokens, x), dim=1)  # [num_patches, num_mini_patches+1, 768]

        # add positional encoding to each token
        x = x + self.interpolate_pos_encoding(x, w, h)

        if self.register_tokens is not None:
            x = torch.cat(
                (
                    x[:, :1],
                    self.register_tokens.expand(x.shape[0], -1, -1),
                    x[:, 1:],
                ),
                dim=1,
            )

        return self.pos_drop(x)

    def forward(self, x, mask: Optional[torch.Tensor] = None):
        # x_in = [num_patches, 3, img_size, img_size], x_out = [num_patches, num_mini_patches+1, 768]
        x = self.prepare_tokens(x)
        for blk in self.blocks:
            x = blk(x, mask=mask)
        x = self.norm(x)
        return x[:, 0]

    def get_last_selfattention(self, x, mask: Optional[torch.Tensor] = None):
        x = self.prepare_tokens(x)
        for i, blk in enumerate(self.blocks):
            if i < len(self.blocks) - 1:
                x = blk(x, mask=mask)
            else:
                # return attention of the last block
                return blk(x, mask=mask, return_attention=True)

    def get_intermediate_layers(self, x, n=1, mask: Optional[torch.Tensor] = None):
        x = self.prepare_tokens(x)
        # we return the output tokens from the `n` last blocks
        output = []
        for i, blk in enumerate(self.blocks):
            x = blk(x, mask=mask)
            if len(self.blocks) - i <= n:
                output.append(self.norm(x))
        return output


def vit_tiny(
    img_size: int = 256,
    patch_size: int = 16,
    embed_dim: int = 192,
    num_register_tokens: int = 0,
    **kwargs,
):
    model = VisionTransformer(
        img_size=img_size,
        patch_size=patch_size,
        embed_dim=embed_dim,
        depth=12,
        num_heads=3,
        mlp_ratio=4,
        qkv_bias=True,
        norm_layer=partial(nn.LayerNorm, eps=1e-6),
        num_register_tokens=num_register_tokens,
        **kwargs,
    )
    return model


def vit_small(
    img_size: int = 256,
    patch_size: int = 16,
    embed_dim: int = 384,
    num_register_tokens: int = 0,
    **kwargs,
):
    model = VisionTransformer(
        img_size=img_size,
        patch_size=patch_size,
        embed_dim=embed_dim,
        depth=12,
        num_heads=6,
        mlp_ratio=4,
        qkv_bias=True,
        norm_layer=partial(nn.LayerNorm, eps=1e-6),
        num_register_tokens=num_register_tokens,
        **kwargs,
    )
    return model


def vit_base(
    img_size: int = 256,
    patch_size: int = 16,
    embed_dim: int = 768,
    num_register_tokens: int = 0,
    **kwargs,
):
    model = VisionTransformer(
        img_size=img_size,
        patch_size=patch_size,
        embed_dim=embed_dim,
        depth=12,
        num_heads=12,
        mlp_ratio=4,
        qkv_bias=True,
        norm_layer=partial(nn.LayerNorm, eps=1e-6),
        num_register_tokens=num_register_tokens,
        **kwargs,
    )
    return model


class VisionTransformer4K(nn.Module):
    """Vision Transformer 4K"""

    def __init__(
        self,
        num_classes: int = 0,
        img_size: int = 4096,
        patch_size: int = 256,
        dino_max_crop_scale: float = 0.875,
        input_embed_dim: int = 384,
        output_embed_dim: int = 192,
        depth: int = 12,
        num_heads: int = 12,
        mlp_ratio: float = 4.0,
        qkv_bias: bool = False,
        qk_scale: Optional[float] = None,
        drop_rate: float = 0.0,
        attn_drop_rate: float = 0.0,
        drop_path_rate: float = 0.0,
        norm_layer: Callable = nn.LayerNorm,
        num_register_tokens: int = 0,
        mask_attn: bool = False,
        img_size_pretrained: Optional[int] = None,
    ):
        super().__init__()
        self.embed_dim = output_embed_dim
        self.num_heads = num_heads
        self.num_register_tokens = num_register_tokens

        self.phi = nn.Sequential(
            *[
                nn.Linear(input_embed_dim, output_embed_dim),
                nn.GELU(),
                nn.Dropout(p=drop_rate),
            ]
        )
        num_patches = int(img_size * dino_max_crop_scale // patch_size) ** 2
        if img_size_pretrained:
            num_patches = (
                int(img_size_pretrained * dino_max_crop_scale // patch_size) ** 2
            )

        self.cls_token = nn.Parameter(torch.zeros(1, 1, self.embed_dim))
        self.pos_embed = nn.Parameter(
            torch.zeros(1, num_patches + 1, self.embed_dim)
        )  # [1, 196+1, 192]
        self.pos_drop = nn.Dropout(p=drop_rate)

        assert num_register_tokens >= 0
        self.register_tokens = (
            nn.Parameter(torch.zeros(1, num_register_tokens, self.embed_dim)) if num_register_tokens else None
        )

        dpr = [
            x.item() for x in torch.linspace(0, drop_path_rate, depth)
        ]  # stochastic depth decay rule
        self.blocks = nn.ModuleList(
            [
                Block(
                    dim=self.embed_dim,
                    num_heads=num_heads,
                    mlp_ratio=mlp_ratio,
                    qkv_bias=qkv_bias,
                    qk_scale=qk_scale,
                    drop=drop_rate,
                    attn_drop=attn_drop_rate,
                    drop_path=dpr[i],
                    norm_layer=norm_layer,
                    mask_attn=mask_attn,
                )
                for i in range(depth)
            ]
        )
        self.norm = norm_layer(self.embed_dim)

        # Classifier head
        self.head = (
            nn.Linear(self.embed_dim, num_classes) if num_classes > 0 else nn.Identity()
        )

        trunc_normal_(self.pos_embed, std=0.02)
        trunc_normal_(self.cls_token, std=0.02)
        if self.register_tokens is not None:
            nn.init.normal_(self.register_tokens, std=1e-6)
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=0.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def interpolate_pos_encoding(self, x, w, h):
        npatch_sq = (
            x.shape[1] - 1
        )  # x = [M, npatch**2+1, 192] where npatch = number of (patch_size, patch_size) patches fitting along img_size
        N = (
            self.pos_embed.shape[1] - 1
        )  # self.pos_embed = [1, 1+196, 192] -> N = 196 (when patch_size = 256 and img_size = 4096)
        if npatch_sq == N and w == h:
            return self.pos_embed
        class_pos_embed = self.pos_embed[:, 0]  # [1, 192]
        patch_pos_embed = self.pos_embed[:, 1:]  # [1, N, 192]
        dim = x.shape[-1]  # dim = 192
        w0 = w // 1  # w = npatch
        h0 = h // 1  # h = npatch
        # we add a small number to avoid floating point error in the interpolation
        # see discussion at https://github.com/facebookresearch/dino/issues/8
        w0, h0 = w0 + 0.1, h0 + 0.1
        patch_pos_embed = nn.functional.interpolate(
            patch_pos_embed.reshape(
                1, int(math.sqrt(N)), int(math.sqrt(N)), dim
            ).permute(0, 3, 1, 2),
            scale_factor=(w0 / math.sqrt(N), h0 / math.sqrt(N)),
            mode="bicubic",
            align_corners=False,
            recompute_scale_factor=True,
        )  # [1, N, 192] -> [1, sqrt(N), sqrt(N), 192] -> [1, 192, sqrt(N), sqrt(N)] -> [1, 192, npatch, npatch]
        assert (
            int(w0) == patch_pos_embed.shape[-2]
            and int(h0) == patch_pos_embed.shape[-1]
        )
        patch_pos_embed = patch_pos_embed.permute(0, 2, 3, 1).view(
            1, -1, dim
        )  # [1, 16, 16, 192] -> [1, 256, 192]
        return torch.cat(
            (class_pos_embed.unsqueeze(0), patch_pos_embed), dim=1
        )  # [1, 1+256, 192]

    def prepare_tokens(self, x):
        # x = [M, 384, npatch, npatch] where npatch = number of (patch_size, patch_size) patches fitting along img_size
        B, _, w, h = x.shape
        x = x.flatten(2, 3).transpose(1, 2)  # [M, npatch**2, 384]
        x = self.phi(x)  # [M, npatch**2, 192]

        # add the [CLS] token to the embed patch tokens
        cls_tokens = self.cls_token.expand(B, -1, -1)  # [M, 1, 192]
        x = torch.cat((cls_tokens, x), dim=1)  # [M, npatch**2+1, 192]

        # add positional encoding to each token
        x = x + self.interpolate_pos_encoding(x, w, h)  # [M, npatch**2+1, 192]

        if self.register_tokens is not None:
            x = torch.cat(
                (
                    x[:, :1],
                    self.register_tokens.expand(x.shape[0], -1, -1),
                    x[:, 1:],
                ),
                dim=1,
            )

        return self.pos_drop(x)

    def forward(self, x, mask: Optional[torch.Tensor] = None):
        # x = [M, 384, npatch, npatch]
        x = self.prepare_tokens(x)  # [M, npatch**2+1, 192]
        for blk in self.blocks:
            x = blk(x, mask=mask)
        x = self.norm(x)
        return x[:, 0]

    def get_last_selfattention(self, x, mask: Optional[torch.Tensor] = None):
        x = self.prepare_tokens(x)
        for i, blk in enumerate(self.blocks):
            if i < len(self.blocks) - 1:
                x = blk(x, mask=mask)
            else:
                # return attention of the last block
                return blk(x, mask=mask, return_attention=True)

    def get_intermediate_layers(self, x, n=1, mask: Optional[torch.Tensor] = None):
        x = self.prepare_tokens(x)
        # we return the output tokens from the `n` last blocks
        output = []
        for i, blk in enumerate(self.blocks):
            x = blk(x, mask=mask)
            if len(self.blocks) - i <= n:
                output.append(self.norm(x))
        return output


def vit4k_xs(
    img_size: int = 4096,
    patch_size: int = 256,
    input_embed_dim: int = 384,
    output_embed_dim: int = 192,
    num_classes: int = 0,
    num_register_tokens: int = 0,
    **kwargs,
):
    model = VisionTransformer4K(
        num_classes=num_classes,
        input_embed_dim=input_embed_dim,
        output_embed_dim=output_embed_dim,
        img_size=img_size,
        patch_size=patch_size,
        depth=6,
        num_heads=6,
        mlp_ratio=4,
        qkv_bias=True,
        norm_layer=partial(nn.LayerNorm, eps=1e-6),
        num_register_tokens=num_register_tokens,
        **kwargs,
    )
    return model


class DINOHead(nn.Module):
    def __init__(
        self,
        in_dim,
        out_dim,
        use_bn=False,
        norm_last_layer=True,
        nlayers=3,
        hidden_dim=2048,
        bottleneck_dim=256,
    ):
        super().__init__()
        nlayers = max(nlayers, 1)
        if nlayers == 1:
            self.mlp = nn.Linear(in_dim, bottleneck_dim)
        else:
            layers = [nn.Linear(in_dim, hidden_dim)]
            if use_bn:
                layers.append(nn.BatchNorm1d(hidden_dim))
            layers.append(nn.GELU())
            for _ in range(nlayers - 2):
                layers.append(nn.Linear(hidden_dim, hidden_dim))
                if use_bn:
                    layers.append(nn.BatchNorm1d(hidden_dim))
                layers.append(nn.GELU())
            layers.append(nn.Linear(hidden_dim, bottleneck_dim))
            self.mlp = nn.Sequential(*layers)
        self.apply(self._init_weights)
        self.last_layer = nn.utils.weight_norm(
            nn.Linear(bottleneck_dim, out_dim, bias=False)
        )
        self.last_layer.weight_g.data.fill_(1)
        if norm_last_layer:
            self.last_layer.weight_g.requires_grad = False

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=0.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)

    def forward(self, x):
        x = self.mlp(x)
        x = nn.functional.normalize(x, dim=-1, p=2)
        x = self.last_layer(x)
        return x
